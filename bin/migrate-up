#!/usr/bin/env node
// vim: set ft=javascript:
'use strict'

var program = require('commander')
var path = require('path')
var minimatch = require('minimatch')
var dotenv = require('dotenv')
var migrate = require('../')
var runMigrations = require('../lib/migrate')
var log = require('../lib/log')
var registerCompiler = require('../lib/register-compiler')
var pkg = require('../package.json')

program
  .version(pkg.version)
  .usage('[options] <name>')
  .option('-c, --chdir <dir>', 'Change the working directory', process.cwd())
  .option('-f, --state-file <path>', 'Set path to state file', '.migrate')
  .option('-s, --store <store>', 'Set the migrations store', path.join(__dirname, '..', 'lib', 'file-store'))
  .option('--clean', 'Tears down the migration state before running up')
  .option('--force', 'Force through the command, ignoring warnings')
  .option('--init', 'Runs init for the store')
  .option('--migrations-dir <dir>', 'Change the migrations directory name', 'migrations')
  .option('--matches <glob>', 'A glob pattern to filter migration files', '*')
  .option('--compiler <ext:module>', 'Use the given module to compile files')
  .option('--env [name]', 'Use dotenv to load an environment file')
  .parse(process.argv)

// Change the working dir
process.chdir(program.chdir)

// Setup environment
if (program.env) {
  var e = dotenv.config({
    path: typeof program.env === 'string' ? program.env : '.env'
  })
  if (e && e.error instanceof Error) {
    throw e.error
  }
}

// Check clean flag, exit if NODE_ENV === 'production' and force not specified
if (program.clean && process.env.NODE_ENV === 'production' && !program.force) {
  log.error('error', 'Cowardly refusing to clean while node environment set to production, use --force to continue.')
  process.exit(1)
}

// Check init flag, exit if NODE_ENV === 'production' and force not specified
if (program.init && process.env.NODE_ENV === 'production' && !program.force) {
  log.error('error', 'Cowardly refusing to init while node environment set to production, use --force to continue.')
  process.exit(1)
}

// Load compiler
if (program.compiler) {
  registerCompiler(program.compiler)
}

// Setup store
if (program.store[0] === '.') program.store = path.join(process.cwd(), program.store)

var Store = require(program.store)
var store = new Store(program.stateFile)

loadAndGo()

// Load in migrations
async function loadAndGo () {
  if (program.init && typeof store.init === 'function') {
    await store.init()
  }
  try {
    let set = await migrate.load({
      stateStore: store,
      migrationsDirectory: program.migrationsDir,
      filterFunction: minimatch.filter(program.matches)
    })
    set.on('warning', function (msg) {
      log('warning', msg)
    })
    set.on('migration', function (migration, direction) {
      log(direction, migration.title)
    })
    if (program.clean) {
      await runMigrations(set, 'down', {}, null)
    }
    await runMigrations(set, 'up', {}, program.args[0])
    log('migration', 'complete')
    process.exit(0)
  } catch (error) {
    log.error('error', error)
    process.exit(1)
  }
}
