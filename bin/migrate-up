#!/usr/bin/env node
// vim: set ft=javascript:
'use strict'

const program = require('commander')
const path = require('path')
const minimatch = require('minimatch')
const migrate = require('../')
const runMigrations = require('../lib/migrate')
const log = require('../lib/log')
const registerCompiler = require('../lib/register-compiler')
const pkg = require('../package.json')

program
  .version(pkg.version)
  .usage('[options] <name>')
  .option('-c, --chdir <dir>', 'Change the working directory', process.cwd())
  .option('-f, --state-file <path>', 'Set path to state file', '.migrate')
  .option('-s, --store <store>', 'Set the migrations store', path.join(__dirname, '..', 'lib', 'file-store'))
  .option('--clean', 'Tears down the migration state before running up')
  .option('--force', 'Force through the command, ignoring warnings')
  .option('--init', 'Runs init for the store')
  .option('--migrations-dir <dir>', 'Change the migrations directory name', 'migrations')
  .option('--matches <glob>', 'A glob pattern to filter migration files', '*')
  .option('--compiler <ext:module>', 'Use the given module to compile files')
  .parse(process.argv)

// Check clean flag, exit if NODE_ENV === 'production' and force not specified
if (program.clean && process.env.NODE_ENV === 'production' && !program.force) {
  log.error('error', 'Cowardly refusing to clean while node environment set to production, use --force to continue.')
  process.exit(1)
}

// Check init flag, exit if NODE_ENV === 'production' and force not specified
if (program.init && process.env.NODE_ENV === 'production' && !program.force) {
  log.error('error', 'Cowardly refusing to init while node environment set to production, use --force to continue.')
  process.exit(1)
}
// Change the working dir
process.chdir(program.chdir)

// Load compiler
if (program.compiler) {
  registerCompiler(program.compiler)
}

// Setup store
const Store = require(program.store)
const store = new Store(program.stateFile)

// Call store init
if (program.init && typeof store.init === 'function') {
  store.init(function (err) {
    if (err) return log.error(err)
    loadAndGo()
  })
} else {
  loadAndGo()
}

// Load in migrations
function loadAndGo () {
  migrate
    .load({
      stateStore: store,
      migrationsDirectory: program.migrationsDir,
      filterFunction: minimatch.filter(program.matches)
    })
    .then((set) => {
      set.on('warning', function (msg) {
        log('warn', msg)
      })

      set.on('migration', function (migration, direction) {
        log(direction, migration.title)
      })

      // Run
      let run = (program.clean ? cleanUp : up)

      run(set)
        .then(() => {
          log('migration', 'complete')
          process.exit(0)
        })
        .catch((err) => {
          log.error('error', err)
          process.exit(1)
        })
    })
    .catch((err) => {
      log.error('error', err)
      process.exit(1)
    })
}

function cleanUp (set) {
  return runMigrations(set, 'down')
    .then(() => {
      return up(set)
    })
}

function up (set) {
  return runMigrations(set, 'up', program.args[0])
}
