#!/usr/bin/env node
// vim: set ft=javascript:
'use strict'

const program = require('commander')
const path = require('path')
const dateFormat = require('dateformat')
const minimatch = require('minimatch')
const migrate = require('../')
const log = require('../lib/log')
const registerCompiler = require('../lib/register-compiler')
const pkg = require('../package.json')

program
  .version(pkg.version)
  .usage('[options] <name>')
  .option('-c, --chdir <dir>', 'Change the working directory', process.cwd())
  .option('-f, --state-file <path>', 'Set path to state file', '.migrate')
  .option('-s, --store <store>', 'Set the migrations store', path.join(__dirname, '..', 'lib', 'file-store'))
  .option('-d, --date-format [format]', 'Set a date format to use', 'yyyy-mm-dd')
  .option('--migrations-dir <dir>', 'Change the migrations directory name', 'migrations')
  .option('--matches <glob>', 'A glob pattern to filter migration files', '*')
  .option('--compiler <ext:module>', 'Use the given module to compile files')
  .parse(process.argv)

// Check clean flag, exit if NODE_ENV === 'production' and force not specified
if (program.clean && process.env.NODE_ENV === 'production' && !program.force) {
  log.error('error', 'Cowardly refusing to clean while node environment set to production, use --force to continue.')
  process.exit(1)
}

// Change the working dir
process.chdir(program.chdir)

// Load compiler
if (program.compiler) {
  registerCompiler(program.compiler)
}

// Setup store
const Store = require(program.store)
const store = new Store(program.stateFile)

// Load in migrations
migrate
  .load({
    stateStore: store,
    migrationsDirectory: program.migrationsDir,
    filterFunction: minimatch.filter(program.matches)
  })
  .then(function (set) {
    if (set.migrations.length === 0) {
      return log('list', 'No Migrations')
    }

    set.migrations.forEach(function (migration) {
      log(migration.title + (migration.timestamp ? ' [' + dateFormat(migration.timestamp, program.dateFormat) + ']' : ' [not run]'), migration.description || '<No Description>')
    })
  })
  .catch((err) => {
    log.error('error', err)
    process.exit(1)
  })
