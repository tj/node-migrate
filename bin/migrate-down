#!/usr/bin/env node
'use strict'

var program = require('commander')
var path = require('path')
var log = require('../lib/log')
var MigrationSet = require('../lib/set')
var registerCompiler = require('../lib/register-compiler')
var loadMigrationsIntoSet = require('../lib/load-migrations')
var pkg = require('../package.json')

program
  .version(pkg.version)
  .usage('[options] <name>')
  .option('-c, --chdir <dir>', 'Change the working directory', process.cwd())
  .option('-f, --state-file <path>', 'Set path to state file', path.join('migrations', '.migrate'))
  .option('-s, --store <store>', 'Set the migrations store', path.join(__dirname, '..', 'lib', 'file-store'))
  .option('--migrations-dir <dir>', 'Change the migrations directory name', 'migrations')
  .option('--extention <ext>', 'Change the migrations directory name', '.js')
  .option('--compiler <ext:module>', 'Use the given module to compile files')
  .parse(process.argv)

// Change the working dir
process.chdir(program.chdir)

// Load compiler
if (program.compiler) {
  registerCompiler(program.compiler)
}

// Setup store
var Store = require(program.store)
var store = new Store(program.stateFile)

// Create migrations set
var set = new MigrationSet(store)

// Load directory into set
var matcher = new RegExp(program.extention + '$')
loadMigrationsIntoSet(set, program.migrationsDir, function (file) {
  return !!file.match(matcher)
})

set.on('migration', function (migration, direction) {
  log('down', migration.title)
})

set.down(program.args[0], function (err) {
  if (err) {
    log('error', err)
    process.exit(1)
  }

  log('migration', 'complete')
  process.exit(0)
})
