#!/usr/bin/env node
// vim: set ft=javascript:
'use strict'

const program = require('commander')
const path = require('path')
const minimatch = require('minimatch')
const migrate = require('../')
const runMigrations = require('../lib/migrate')
const log = require('../lib/log')
const registerCompiler = require('../lib/register-compiler')
const pkg = require('../package.json')

program
  .version(pkg.version)
  .usage('[options] <name>')
  .option('-c, --chdir <dir>', 'Change the working directory', process.cwd())
  .option('-f, --state-file <path>', 'Set path to state file', '.migrate')
  .option('-s, --store <store>', 'Set the migrations store', path.join(__dirname, '..', 'lib', 'file-store'))
  .option('--migrations-dir <dir>', 'Change the migrations directory name', 'migrations')
  .option('--matches <glob>', 'A glob pattern to filter migration files', '*')
  .option('--compiler <ext:module>', 'Use the given module to compile files')
  .parse(process.argv)

// Change the working dir
process.chdir(program.chdir)

// Load compiler
if (program.compiler) {
  registerCompiler(program.compiler)
}

// Setup store
const Store = require(program.store)
const store = new Store(program.stateFile)

migrate
  .load({
    stateStore: store,
    migrationsDirectory: program.migrationsDir,
    filterFunction: minimatch.filter(program.matches)
  })
  .then((set) => {
    set.on('warning', function (msg) {
      log('warning', msg)
    })

    set.on('migration', function (migration, direction) {
      log(direction, migration.title)
    })

    runMigrations(set, 'down', program.args[0])
      .then(() => {
        log('migration', 'complete')
        process.exit(0)
      })
      .catch((err) => {
        log('error', err)
        process.exit(1)
      })
  })
  .catch((err) => {
    log.error('error', err)
    process.exit(1)
  })
