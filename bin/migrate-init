#!/usr/bin/env node
// vim: set ft=javascript:
'use strict'

const { Command } = require('commander')
const mkdirp = require('mkdirp')
const dotenv = require('dotenv')
const path = require('path')
const log = require('../lib/log')
const pkg = require('../package.json')
const registerCompiler = require('../lib/register-compiler')

const program = new Command()
program
  .version(pkg.version)
  .option('-f, --state-file <path>', 'Set path to state file', '.migrate')
  .option('-s, --store <store>', 'Set the migrations store', path.join(__dirname, '..', 'lib', 'file-store'))
  .option('--migrations-dir <dir>', 'Change the migrations directory name', 'migrations')
  .option('--compiler <ext:module>', 'Use the given module to compile files')
  .option('-c, --chdir [dir]', 'Change the working directory', process.cwd())
  .option('--env [name]', 'Use dotenv to load an environment file')
  .parse(process.argv)
const opts = program.opts()

// Change the working dir
process.chdir(opts.chdir)

// Setup environment
if (opts.env) {
  const e = dotenv.config({
    path: opts.env
  })
  if (e && e.error instanceof Error) {
    throw e.error
  }
}

// Load compiler
if (opts.compiler) {
  registerCompiler(opts.compiler)
}

// Setup store
if (opts.store[0] === '.') opts.store = path.join(process.cwd(), opts.store)

const StoreImport = require(opts.store)
const Store = StoreImport.default || StoreImport
const store = new Store(opts.stateFile)

// Create migrations dir path
const p = path.resolve(process.cwd(), opts.migrationsDir)

log('migrations dir', p)
mkdirp.sync(p)

// Call store init
if (typeof store.init === 'function') {
  store.init(function (err) {
    if (err) return log.error(err)
    log('init')
  })
}
