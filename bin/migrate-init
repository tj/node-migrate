#!/usr/bin/env node
// vim: set ft=javascript:
'use strict'

var program = require('commander')
var mkdirp = require('mkdirp')
var dotenv = require('dotenv')
var path = require('path')
var rc = require( 'rc' )
var log = require('../lib/log')
var pkg = require('../package.json')

var config = rc('migrate', {
  'chdir': process.cwd(),
  'state-file': '.migrate',
  'store': path.join(__dirname, '..', 'lib', 'file-store'),
  'migrations-dir': 'migrations',
  'matches': '*'
});

program
  .version(pkg.version)
  .option('-f, --state-file <path>', 'Set path to state file', config['state-file'])
  .option('-s, --store <store>', 'Set the migrations store', config['store'])
  .option('--migrations-dir <dir>', 'Change the migrations directory name', config['migrations-dir'])
  .option('-c, --chdir [dir]', 'Change the working directory', config['chdir'])
  .option('--env [name]', 'Use dotenv to load an environment file', config['env'])
  .parse(process.argv)

// Change the working dir
process.chdir(program.chdir)

// Setup environment
if (program.env) {
  var e = dotenv.config({
    path: typeof program.env === 'string' ? program.env : '.env'
  })
  if (e && e.error instanceof Error) {
    throw e.error
  }
}

// Setup store
var Store = require(program.store)
var store = new Store(program.stateFile)

// Create migrations dir path
var p = path.join(process.cwd(), program.migrationsDir)

log('migrations dir', p)
mkdirp.sync(p)

// Call store init
if (typeof store.init === 'function') {
  store.init(function (err) {
    if (err) return log.error(err)
    log('init')
  })
}
